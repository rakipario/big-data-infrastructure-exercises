from typing import Optional, List
from fastapi import APIRouter, status, HTTPException
from pydantic import BaseModel
from bdi_api.settings import DBCredentials, Settings
import psycopg_pool
import json
import boto3
import os
from datetime import datetime

settings = Settings()
db_credentials = DBCredentials()

# S3 client for MinIO
try:
    s3_client = boto3.client(
        "s3",
        endpoint_url=os.getenv("S3_ENDPOINT_URL"),
        aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
        aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
        region_name=os.getenv("AWS_REGION")
    )
    s3_client.list_objects_v2(Bucket=settings.s3_bucket)
except Exception as e:
    print(f"S3 connection error: {e}")
    raise

# PostgreSQL connection pool
try:
    pool = psycopg_pool.ConnectionPool(
        conninfo=f"""
            dbname=postgres
            user={db_credentials.username}
            password={db_credentials.password}
            host={db_credentials.host}
            port={db_credentials.port}
        """,
        max_size=20,
        max_lifetime=600,
        timeout=10
    )
    with pool.connection() as conn:
        conn.execute("SELECT 1")
except Exception as e:
    print(f"Database connection error: {e}")
    raise

s8 = APIRouter(
    responses={
        status.HTTP_404_NOT_FOUND: {"description": "Not found"},
        status.HTTP_422_UNPROCESSABLE_ENTITY: {"description": "Something is wrong with the request"},
    },
    prefix="/api/s8",
    tags=["s8"],
)

class AircraftReturn(BaseModel):
    icao: str
    registration: Optional[str]
    type: Optional[str]
    owner: Optional[str]
    manufacturer: Optional[str]
    model: Optional[str]

@s8.get("/aircraft/", response_model=List[AircraftReturn])
def list_aircraft(num_results: int = 100, page: int = 0):
    """List all the available aircraft, enriched with Aircraft Database info."""
    try:
        with pool.connection() as conn:
            with conn.cursor() as cursor:
                # Check if aircraft table exists
                cursor.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'aircraft'
                    )
                """)
                if not cursor.fetchone()[0]:
                    raise HTTPException(status_code=404, detail="Aircraft data not available")
                query = """
                    SELECT DISTINCT a.icao, a.registration, a.type, ad.ownop AS owner,
                                    ad.manufacturer, ad.model
                    FROM aircraft a
                    LEFT JOIN aircraft_database ad ON a.icao = ad.icao
                    ORDER BY a.icao ASC
                    LIMIT %s OFFSET %s
                """
                cursor.execute(query, (num_results, page * num_results))
                results = cursor.fetchall()
        return [AircraftReturn(
            icao=row[0], registration=row[1], type=row[2], owner=row[3],
            manufacturer=row[4], model=row[5]
        ) for row in results]
    except Exception as e:
        if "relation \"aircraft\" does not exist" in str(e):
            raise HTTPException(status_code=404, detail="Aircraft data not available")
        raise HTTPException(status_code=500, detail=f"Failed to list aircraft: {str(e)}")

class AircraftCO2(BaseModel):
    icao: str
    hours_flown: float
    co2: Optional[float]

@s8.get("/aircraft/{icao}/co2", response_model=AircraftCO2)
def get_aircraft_co2(icao: str, day: str):
    """Returns the CO2 generated by the aircraft in a given day."""
    try:
        # Parse day
        day_dt = datetime.strptime(day, '%Y/%m/%d')
        # Check if aircraft table exists
        with pool.connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'aircraft'
                    )
                """)
                if not cursor.fetchone()[0]:
                    raise HTTPException(status_code=404, detail="Aircraft data not available")
                # Count rows (each row = 5s)
                cursor.execute("""
                    SELECT COUNT(*) FROM aircraft
                    WHERE icao = %s AND DATE(timestamp / 1000.0) = %s
                """, (icao, day_dt.date()))
                row_count = cursor.fetchone()[0]
        hours_flown = (row_count * 5) / 3600  # 5s per row to hours

        # Get fuel consumption rate
        obj = s3_client.get_object(
            Bucket=settings.s3_bucket,
            Key="fuel_consumption/aircraft_type_fuel_consumption_rates.json"
        )
        fuel_data = json.loads(obj['Body'].read().decode('utf-8'))
        with pool.connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT type FROM aircraft WHERE icao = %s LIMIT 1", (icao,))
                aircraft_type = cursor.fetchone()
                if not aircraft_type:
                    return AircraftCO2(icao=icao, hours_flown=hours_flown, co2=None)
                icaotype = aircraft_type[0]

        galph = fuel_data.get(icaotype, {}).get('galph')
        if not galph:
            return AircraftCO2(icao=icao, hours_flown=hours_flown, co2=None)

        # Calculate CO2
        fuel_used_gal = galph * hours_flown
        fuel_used_kg = fuel_used_gal * 3.04
        co2_tons = (fuel_used_kg * 3.15) / 907.185
        return AircraftCO2(icao=icao, hours_flown=hours_flown, co2=co2_tons)
    except Exception as e:
        if "relation \"aircraft\" does not exist" in str(e):
            raise HTTPException(status_code=404, detail="Aircraft data not available")
        raise HTTPException(status_code=500, detail=f"Failed to compute CO2: {str(e)}")